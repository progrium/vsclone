on:
  push:
    branches:
      - main
env:
  AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
  AC_ISSUER_ID: ${{ secrets.AC_ISSUER_ID }}
  AC_PRIVATE_KEY: ${{ secrets.AC_PRIVATE_KEY }}
  SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
  SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERT_PASSWORD }}
jobs:
  detect-vscode-changes:
    name: Detect VSCode changes
    runs-on: ubuntu-latest
    outputs:
      vscode-changed: ${{ steps.changes.outputs.vscode }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            vscode:
              - 'external/vscode/**'
  
  build-vscode:
    name: Build patched VSCode Web artifact
    needs: detect-vscode-changes
    if: needs.detect-vscode-changes.outputs.vscode-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build VSCode Web
        uses: docker/build-push-action@v5
        with:
          context: external/vscode/patched
          push: true
          load: true
          tags: ghcr.io/${{ github.repository }}:vscode-web


  setup-vscode-web:
    name: Setup VSCode Web artifact
    needs: [detect-vscode-changes, build-vscode]
    if: always() && needs.detect-vscode-changes.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - run: |
          rm -rf ./vscode-web
          mkdir -p ./vscode-web/vscode
          docker run --rm -v $(pwd)/vscode-web/vscode:/dist ghcr.io/${{ github.repository }}:vscode-web
      
      - uses: actions/upload-artifact@v4
        with:
          name: vscode-web
          path: vscode-web

  build-windows:
    name: Build for Windows (arm64, amd64)
    needs: setup-vscode-web
    if: always() && needs.setup-vscode-web.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      DIST_OS: windows
      DIST_ARCH: arm64 amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true

      - uses: actions/download-artifact@v4
        with:
          name: vscode-web
          path: tmp
      - run: |
          cd tmp && zip -r ../assets/vscode-web.zip .

      - name: Build project
        run: make dist
      
      - run: mv dist/*_arm64 ./vsclone
      - uses: actions/upload-artifact@v4
        with:
          name: vsclone-windows-arm64
          path: vsclone

      - run: mv dist/*_amd64 ./vsclone
      - uses: actions/upload-artifact@v4
        with:
          name: vsclone-windows-amd64
          path: vsclone


  build-linux:
    name: Build for Linux (arm64, amd64)
    needs: setup-vscode-web
    if: always() && needs.setup-vscode-web.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      DIST_OS: linux
      DIST_ARCH: arm64 amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true

      - uses: actions/download-artifact@v4
        with:
          name: vscode-web
          path: tmp
      - run: |
          cd tmp && zip -r ../assets/vscode-web.zip .

      - name: Build project
        run: make dist

      - run: mv dist/*_arm64 ./vsclone
      - uses: actions/upload-artifact@v4
        with:
          name: vsclone-linux-arm64
          path: vsclone

      - run: mv dist/*_amd64 ./vsclone
      - uses: actions/upload-artifact@v4
        with:
          name: vsclone-linux-amd64
          path: vsclone
  
  build-darwin-arm64:
    name: Build for Darwin (arm64)
    needs: setup-vscode-web
    if: always() && needs.setup-vscode-web.result == 'success'
    runs-on: macos-14
    permissions:
      contents: write
    env:
      DIST_OS: darwin
      DIST_ARCH: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup signing certificate and notarytool
        run: |
          echo "$SIGNING_CERTIFICATE" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P "$SIGNING_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          echo "$AC_PRIVATE_KEY" | base64 --decode > private_key.p8
          xcrun notarytool store-credentials --key private_key.p8 \
            --key-id "$AC_API_KEY_ID" --issuer "$AC_ISSUER_ID" ac-profile

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true

      - uses: actions/download-artifact@v4
        with:
          name: vscode-web
          path: tmp
      - run: |
          cd tmp && zip -r ../assets/vscode-web.zip .

      - name: Build project
        run: |
          make dist
          mv dist/*_arm64 ./vsclone

      - name: Sign
        run: |
          codesign --timestamp --options runtime --sign "Developer ID Application" ./vsclone
      
      - name: Prepare for notarization
        run: zip vsclone.zip vsclone
      
      - name: Notarize
        run: |
          xcrun notarytool submit vsclone.zip --keychain-profile ac-profile --wait

      - uses: actions/upload-artifact@v4
        with:
          name: vsclone-darwin-arm64
          path: vsclone

  build-darwin-amd64:
    name: Build for Darwin (amd64)
    needs: setup-vscode-web
    if: always() && needs.setup-vscode-web.result == 'success'
    runs-on: macos-13
    permissions:
      contents: write
    env:
      DIST_OS: darwin
      DIST_ARCH: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup signing certificate and notarytool
        run: |
          echo "$SIGNING_CERTIFICATE" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P "$SIGNING_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          echo "$AC_PRIVATE_KEY" | base64 --decode > private_key.p8
          xcrun notarytool store-credentials --key private_key.p8 \
            --key-id "$AC_API_KEY_ID" --issuer "$AC_ISSUER_ID" ac-profile

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true

      - uses: actions/download-artifact@v4
        with:
          name: vscode-web
          path: tmp
      - run: |
          cd tmp && zip -r ../assets/vscode-web.zip .

      - name: Build project
        run: |
          make dist
          mv dist/*_amd64 ./vsclone

      - name: Sign
        run: |
          codesign --timestamp --options runtime --sign "Developer ID Application" ./vsclone
      
      - name: Prepare for notarization
        run: zip vsclone.zip vsclone
      
      - name: Notarize
        run: |
          xcrun notarytool submit vsclone.zip --keychain-profile ac-profile --wait

      - uses: actions/upload-artifact@v4
        with:
          name: vsclone-darwin-amd64
          path: vsclone
